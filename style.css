*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html,body{
    height:100%;
    width:100%;
    background: linear-gradient(to right, #c751c0, #f0ebae);
    font-family: 'Segoe UI', sans-serif;
}



.top{
    margin:20px 15px;
    display: flex;
    justify-content: space-between;
}
.container{
    /* border:4px solid purple; */
    display: grid;
    grid-template-columns: repeat(auto-fill,minmax(275px,300px));
    grid-auto-rows: 300px;
    gap:20px;
}


.card{

    display: flex;
    flex-direction: column;
    justify-content: space-between;
    border:10px solid rgb(150, 8, 150);
    border-radius: 15px 0px 0px 15px;
    border-left: 20px solid rgb(173, 25, 173);
   padding: 10px 5px  10px  10px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
   transition: transform 0.3s  ease, box-shadow 0.3s ease;

   background:linear-gradient(to left,rgb(235, 218, 234) 70px,rgb(147, 96, 137) 100%);
}

.card p{
    margin: 0px 0px;
    font-size: 14px;
    font-weight: bold;
    text-align: center;
}

.card .paratitle{
 font-weight: bold;
  font-size: 16px;
  color: #34495e;
  font-style: italic;

}

.card .parapages{
    color: #636e72;
  font-style: italic;
}

.card .paraauthor{
    color: #5a6062;
  font-style: italic;
    
}

label{
    font-weight: bold;
}




.read{
    background-color: #00b894;
    color: white;
    border: none;
    padding: 8px 10px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 12px;
}

.remove{
    background-color: #d63031;
  color: white;
  border: none;
  padding: 8px 10px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 12px;
}

.edit{
  background-color: #0984e3;
  color: white;
  border: none;
  padding: 8px 10px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 12px;
}
.card:hover{
    transform: scale(1.05);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
   
}

.close,.newButton,.submitMyForm,.save{
    border-radius: 3px 10px;
    background-color:rgb(182, 99, 182);
    padding:7px  20px ;
    border: none;
    color:white;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s  ease,transform 0.3s ease-in-out;


}

button:hover{
    background-color: #bd7878;
    transform:scale(1.066);
}

dialog{
  
    width: 80% ;
    max-width: 500px;
    background-color: rgb(233, 90, 233);
    padding:20px;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

legend{
    text-align: center;
}

fieldset{
    padding:20px 0px;
}


.close {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 20px;
    cursor: pointer;
  }


  /* Open state of the dialog  */
dialog:open {
    opacity: 1;
    transform: scaleY(1);
  }
  
  /* Closed state of the dialog   */
  dialog {
    opacity: 0;
    transform: scaleY(0);
    transition:
      opacity 0.7s ease-out,
      transform 0.7s ease-out,
      overlay 0.7s ease-out allow-discrete,
      display 0.7s ease-out allow-discrete;
    /* Equivalent to
    transition: all 0.7s allow-discrete; */
  }
  
  /* Before open state  */
  /* Needs to be after the previous dialog:open rule to take effect,
      as the specificity is the same */
  @starting-style {
    dialog:open {
      opacity: 0;
      transform: scaleY(0);
    }
  }
  
  /* Transition the :backdrop when the dialog modal is promoted to the top layer */
  dialog::backdrop {
    background-color: rgb(0 0 0 / 0%);
    transition:
      display 0.7s allow-discrete,
      overlay 0.7s allow-discrete,
      background-color 0.7s;

  }
  
  dialog:open::backdrop {
    background-color: rgb(0 0 0 / 25%);
  }
  
  /* This starting-style rule cannot be nested inside the above selector
  because the nesting selector cannot represent pseudo-elements. */
  
  @starting-style {
    dialog:open::backdrop {
      background-color: rgb(0 0 0 / 0%);
    }
  }
  
